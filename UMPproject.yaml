scale: 1
metatile: 2
name: "UMP Carto"
description: "UMPowa wersja stylu mapy www oparta na carto"
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 0
  - 0
  - 4
format: "png"
interactivity: false
minzoom: 0
maxzoom: 20
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and don't actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "umpgis"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"

Stylesheet:
  - "style.mss"
  - "shapefiles.mss"
#  - "landcover.mss"
  - "UMP-teren.mss"
  - "water.mss"
  - "water-features.mss"
  - "roads.mss"
  - "power.mss"
  - "citywalls.mss"
  - "placenames.mss"
  - "UMP-budynki.mss"
  #- "buildings.mss"
  - "POI-atrakcje.mss"
  - "POI-infra.mss"
  - "POI-jedzenie.mss"
  - "POI-nocleg.mss"
  - "POI-rozrywka.mss"
  - "POI-sluzby.mss"
  - "POI-transport.mss"
  - "POI-highways.mss"
  - "POI-uslugi.mss"
  - "POI-zakupy.mss"
  - "POI-znaki.mss"
  - "POI-teren.mss"
  - "POI-morze.mss"
  - "POI-inne.mss"
  - "stations.mss"
  - "ferry-routes.mss"
  - "aerialways.mss"
  - "admin.mss"
  - "addressing.mss"
Layer:
  - id: "world"
    name: "world"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/simplified-land-polygons-complete-3857/simplified_land_polygons.shp"
      type: "shape"
    advanced: {}
  - id: "coast-poly"
    name: "coast-poly"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/land-polygons-split-3857/land_polygons.shp"
      type: "shape"
    advanced: {}
  - id: "builtup"
    name: "builtup"
    geometry: "polygon"
    class: ""
    extent: *world
    srs-name: "mercator"
    srs: "+proj=merc +datum=WGS84 +over"
    Datasource:
      file: "data/world_boundaries/builtup_area.shp"
      type: "shape"
    advanced: {}
  - id: "necountries"
    name: "necountries"
    class: ""
    geometry: "linestring"
    <<: *extents84
    Datasource:
      file: "data/ne_110m_admin_0_boundary_lines_land/ne_110m_admin_0_boundary_lines_land.shp"
      type: "shape"
    advanced: {}
  - id: "teren"
    name: "teren"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, name, way_area/(!pixel_width!*!pixel_height!) AS way_pixels, "ump:type" AS garmin_type
            FROM planet_osm_polygon
            WHERE (
              "ump:type" IN ( '0x1', '0x2', '0x3','0x5','0x9','0xc','0xd','0xe','0x20')
              OR ( "ump:type" BETWEEN  '0x14' AND '0x18' )
              OR ( "ump:type" BETWEEN  '0x1a' AND '0x1f' )
              OR ( "ump:type" BETWEEN  '0x4e' AND '0x4f' )
              OR ( "ump:type" BETWEEN  '0x51' AND '0x53' )
              OR "ump:type" IN ( '0x4', '0x6', '0x7','0x8','0xa','0xb','0x13','0x19')
              ) AND way_area/(!pixel_width!*!pixel_height!) > 0.01
            ORDER BY z_order, way_area DESC
          ) AS teren
    advanced: {}
  - id: "water-lines-casing"
    name: "water-lines-casing"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
          FROM planet_osm_line
          WHERE waterway IN ('stream', 'drain', 'ditch')
        ) AS water_lines_casing
    advanced: {}
  - id: "water-lines-low-zoom"
    name: "water-lines-low-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT way, waterway
          FROM planet_osm_line
          WHERE waterway = 'river'
        ) AS water_lines_low_zoom
    advanced: {}
  - id: "water-areas"
    name: "water-areas"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural", waterway, landuse, name, way_area/(!pixel_width!*!pixel_height!) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock', 'riverbank', 'canal')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('lake', 'water', 'land', 'glacier', 'mud'))
            AND building IS NULL
            AND way_area/(!pixel_width!*!pixel_height!) > 0.01
          ORDER BY z_order, way_area DESC
        ) AS water_areas
    advanced: {}
  - id: "water-lines"
    name: "water-lines"
    class: "water-lines"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway, lock, name,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'no' AS bridge
          FROM planet_osm_line
          WHERE waterway IN ('weir', 'river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
            AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
          ORDER BY z_order
        ) AS water_lines
    advanced: {}
  - id: "piers"
    name: "piers"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_line
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers
    advanced: {}
  - id: "locks"
    name: "locks"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, waterway
          FROM planet_osm_point
          WHERE waterway = 'lock_gate'
        ) AS locks
    advanced: {}
  - id: "tunnels"
    name: "tunnels"
    class: "tunnels-fill tunnels-casing access directions"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT *
          FROM (
            (SELECT
                way, prio,
                ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END)) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE WHEN oneway IN ('yes', '1', '-1') THEN oneway ELSE NULL END AS oneway,
                CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no' END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
            FROM planet_osm_line
              JOIN (VALUES
                ('highway_motorway', 380),
                ('highway_trunk', 370),
                ('highway_primary', 360),
                ('highway_secondary', 350),
                ('highway_tertiary', 340),
                ('highway_residential', 330),
                ('highway_unclassified', 330),
                ('highway_road', 330),
                ('highway_living_street', 320),
                ('highway_pedestrian', 310),
                ('highway_raceway', 300),
                ('highway_motorway_link', 240),
                ('highway_ramp_fast', 235),
                ('highway_trunk_link', 230),
                ('highway_primary_link', 220),
                ('highway_ramp_slow', 215),
                ('highway_secondary_link', 210),
                ('highway_tertiary_link', 200),
                ('highway_road_link', 180),
                ('highway_service', 150),
                ('highway_track', 110),
                ('highway_path', 100),
                ('highway_footway', 100),
                ('highway_bridleway', 100),
                ('highway_cycleway', 100),
                ('highway_steps', 100),
                ('highway_platform', 90),
                ('highway_proposed', 20),
                ('highway_construction', 10)
              ) AS ordertable (feature, prio)
                ON ('highway_' || planet_osm_line.highway) = ordertable.feature
            WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes'))
          UNION ALL
          (SELECT
              way, prio,
              COALESCE(('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' ELSE railway END)),
               ('aeroway_' || aeroway)) AS feature,
               horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
              CASE WHEN access IN ('destination') THEN 'destination'::text
                WHEN access IN ('no', 'private') THEN 'no'::text
              ELSE NULL END AS access,
              construction,
              CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
              NULL AS oneway,
              'no' AS link,
              CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
            FROM planet_osm_line
              JOIN (VALUES
                ('railway_rail', 430),
                ('railway_spur', 430),
                ('railway_siding', 430),
                ('railway_subway', 420),
                ('railway_narrow_gauge', 420),
                ('railway_light_rail', 420),
                ('railway_preserved', 420),
                ('railway_funicular', 420),
                ('railway_monorail', 420),
                ('railway_miniature', 420),
                ('railway_turntable', 420),
                ('railway_tram', 410),
                ('railway_disused', 400),
                ('railway_construction', 400),
                ('aeroway_runway', 60),
                ('aeroway_taxiway', 50),
                ('railway_platform', 90)
              ) AS ordertable (feature, prio)
                ON COALESCE(('railway_' || planet_osm_line.railway), ('aeroway_' || planet_osm_line.aeroway)) = ordertable.feature
            WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
            )) AS features
          ORDER BY layernotnull, prio, case when access in ('no', 'private') then 0 when access in ('destination') then 1 else 2 end
        ) AS tunnels
    properties:
      group-by: "layernotnull"
    advanced: {}
  - id: "citywalls"
    name: "citywalls"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE historic = 'citywalls')
        AS citywalls
    advanced: {}
  - id: "castlewalls"
    name: "castlewalls"
    class: "castlewalls"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE historic = 'castle_walls'
        ) AS castlewalls
    advanced: {}
  - id: "castlewalls-poly"
    name: "castlewalls-poly"
    class: "castlewalls"
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_polygon
          WHERE historic = 'castle_walls'
        ) AS castlewalls_poly
    advanced: {}
  - id: "landuse-overlay"
    name: "landuse-overlay"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, landuse, leisure
          FROM planet_osm_polygon
          WHERE (landuse = 'military') AND building IS NULL
        ) AS landuse_overlay
    advanced: {}
  - id: "line-barriers"
    name: "line-barriers"
    class: "barriers"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, barrier
          FROM planet_osm_line
          WHERE barrier IS NOT NULL
        ) AS line_barriers
    advanced: {}
  - id: "cliffs"
    name: "cliffs"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural", man_made
          FROM planet_osm_line
          WHERE "natural" = 'cliff' OR man_made = 'embankment'
        ) AS cliffs
    advanced: {}
  - id: "area-barriers"
    name: "area-barriers"
    class: "barriers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, barrier
          FROM planet_osm_polygon
          WHERE barrier IS NOT NULL
        ) AS area_barriers
    advanced: {}
  - id: "ferry-routes"
    name: "ferry-routes"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE route = 'ferry'
        ) AS ferry_routes
    advanced: {}
  - id: "highway-area-casing"
    name: "highway-area-casing"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE((
              'highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'track', 'path', 'platform') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
            OR railway IN ('platform')
          ORDER BY z_order, way_area DESC
        ) AS highway_area_casing
    advanced: {}
  - id: "roads-casing"
    name: "roads-casing"
    class: "roads-casing"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            *
          FROM
          (
            (SELECT
                way, prio,
                ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END)) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text WHEN access IN ('no', 'private') THEN 'no'::text ELSE NULL END AS access, construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                CASE WHEN oneway IN ('yes', '1', '-1') THEN oneway ELSE NULL END AS oneway,
                CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes' ELSE 'no' END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
                JOIN (VALUES
                  ('highway_motorway',380),
                  ('highway_trunk',370),
                  ('highway_primary',360),
                  ('highway_secondary',350),
                  ('highway_tertiary',340),
                  ('highway_residential',330),
                  ('highway_unclassified',330),
                  ('highway_road',330),
                  ('highway_living_street',320),
                  ('highway_pedestrian',310),
                  ('highway_raceway',300),
                  ('highway_motorway_link',240),
                ('highway_ramp_fast', 235),
                  ('highway_trunk_link',230),
                  ('highway_primary_link',220),
                ('highway_ramp_slow', 215),
                  ('highway_secondary_link',210),
                  ('highway_tertiary_link',200),
                ('highway_road_link', 180),
                  ('highway_service',150),
                  ('highway_track',110),
                  ('highway_path',100),
                  ('highway_footway',100),
                  ('highway_bridleway',100),
                  ('highway_cycleway',100),
                  ('highway_steps',100),
                  ('highway_platform',90),
                  ('highway_proposed',20),
                  ('highway_construction',10)
                ) AS ordertable (feature, prio)
                  ON ('highway_' || planet_osm_line.highway) = ordertable.feature
                WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                  AND (covered IS NULL OR NOT covered = 'yes')
                  AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')))
            UNION ALL
            (SELECT
                way, prio,
                COALESCE(('railway_' ||(CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' ELSE railway end)), ('aeroway_' || aeroway)) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text WHEN access IN ('no', 'private') THEN 'no'::text ELSE NULL END AS access,
                construction, CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                NULL AS oneway, 'no' AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
                JOIN (VALUES
                  ('railway_rail', 430),
                  ('railway_spur', 430),
                  ('railway_siding', 430),
                  ('railway_subway', 420),
                  ('railway_narrow_gauge', 420),
                  ('railway_light_rail', 420),
                  ('railway_preserved', 420),
                  ('railway_funicular', 420),
                  ('railway_monorail', 420),
                  ('railway_miniature', 420),
                  ('railway_turntable', 420),
                  ('railway_tram', 410),
                  ('railway_disused', 400),
                  ('railway_construction', 400),
                  ('aeroway_runway', 60),
                  ('aeroway_taxiway', 50),
                  ('railway_platform', 90)
                ) AS ordertable (feature, prio)
                  ON COALESCE(('railway_' || planet_osm_line.railway), ('aeroway_' || planet_osm_line.aeroway)) = ordertable.feature
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
              )
            ) AS features
          ORDER BY prio
        ) AS roads_casing
    advanced: {}
  - id: "highway-area-fill"
    name: "highway-area-fill"
    class: ""
    # FIXME: No geometry?
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
              (('aeroway_' || CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform', 'services')
            OR railway IN ('platform')
            OR aeroway IN ('runway', 'taxiway', 'helipad')
          ORDER BY z_order, way_area desc
        ) AS highway_area_fill
    advanced: {}
  - id: "roads-fill"
    name: "roads-fill"
    class: "roads-fill access directions"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            *
          FROM
          (
            (SELECT
                way, prio,
                ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                CASE WHEN oneway IN ('yes', '1', '-1') THEN oneway ELSE NULL END AS oneway,
                CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes' ELSE 'no' END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
                JOIN (VALUES
                  ('highway_motorway',380),
                  ('highway_trunk',370),
                  ('highway_primary',360),
                  ('highway_secondary',350),
                  ('highway_tertiary',340),
                  ('highway_residential',330),
                  ('highway_unclassified',330),
                  ('highway_road',330),
                  ('highway_living_street',320),
                  ('highway_pedestrian',310),
                  ('highway_raceway',300),
                  ('highway_motorway_link',240),
                ('highway_ramp_fast', 235),
                  ('highway_trunk_link',230),
                  ('highway_primary_link',220),
                ('highway_ramp_slow', 215),
                  ('highway_secondary_link',210),
                  ('highway_tertiary_link',200),
                ('highway_road_link', 180),
                  ('highway_service',150),
                  ('highway_track',110),
                  ('highway_path',100),
                  ('highway_footway',100),
                  ('highway_bridleway',100),
                  ('highway_cycleway',100),
                  ('highway_steps',100),
                  ('highway_platform',90),
                  ('highway_proposed',20),
                  ('highway_construction',10)
                ) AS ordertable (feature, prio)
                  on ('highway_' || planet_osm_line.highway) = ordertable.feature
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')))
            UNION ALL
            (SELECT
                way, prio,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                NULL AS oneway,
                'no' AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
              FROM planet_osm_line
                JOIN (VALUES
                  ('railway_rail',430),
                  ('railway_spur',430),
                  ('railway_siding',430),
                  ('railway_subway',420),
                  ('railway_narrow_gauge',420),
                  ('railway_light_rail',420),
                  ('railway_preserved',420),
                  ('railway_funicular',420),
                  ('railway_monorail',420),
                  ('railway_miniature',420),
                  ('railway_turntable',420),
                  ('railway_tram',410),
                  ('railway_disused',400),
                  ('railway_construction',400),
                  ('aeroway_runway',60),
                  ('aeroway_taxiway',50),
                  ('railway_platform',90)) AS ordertable (feature, prio)
                ON COALESCE(('railway_' || planet_osm_line.railway), ('aeroway_' || planet_osm_line.aeroway)) = ordertable.feature
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
            )
          ) AS features ORDER BY prio, case when access in ('no', 'private') then 0 when access in ('destination') then 1 else 2 end
        ) AS roads_fill
    advanced: {}
  - id: "turning-circle-fill"
    name: "turning-circle-fill"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            DISTINCT on (p.way)
            p.way AS way, l.highway AS int_tc_type,
            CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
              ELSE 'INT-normal'::text END AS int_tc_service
          FROM planet_osm_point p
            JOIN planet_osm_line l
              ON ST_DWithin(p.way, l.way, 0.1)
            JOIN (VALUES
              ('tertiary', 1),
              ('unclassified', 2),
              ('residential', 3),
              ('living_street', 4),
              ('service', 5)
            ) AS v (highway, prio)
              ON v.highway=l.highway
          WHERE p.highway = 'turning_circle' OR p.highway = 'turning_loop'
          ORDER BY p.way, v.prio
        ) AS turning_circle_fill
    advanced: {}
  - id: "aerialways"
    name: "aerialways"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, aerialway FROM planet_osm_line WHERE aerialway IS NOT NULL) AS aerialways
    advanced: {}
  - id: "roads-low-zoom"
    name: "roads-low-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way, COALESCE(('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)), ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))) AS feature, tunnel
               FROM planet_osm_roads
               WHERE highway IS NOT NULL
                  OR (railway IS NOT NULL AND railway != 'preserved' AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))
               ORDER BY z_order
              ) AS roads_low_zoom
    advanced: {}
  - id: "waterway-bridges"
    name: "waterway-bridges"
    class: "water-lines"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, waterway, name, CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel, 'yes' AS bridge FROM planet_osm_line WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi') AND bridge IN ('yes', 'aqueduct') ORDER BY z_order) AS waterway_bridges
    advanced: {}
  - id: "budynki"
    name: "budynki"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, name, way_area/(!pixel_width!*!pixel_height!) AS way_pixels, "ump:type" AS garmin_type
            FROM planet_osm_polygon
            WHERE 
              "ump:type" IN ( '0x4', '0x6', '0x7','0x8','0xa','0xb','0x13','0x19')
            ORDER BY z_order, way_area DESC
          ) AS budynki
    advanced: {}
  - id: "bridges"
    name: "bridges"
    class: "bridges-fill bridges-casing access directions"
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT *
          FROM (
            (SELECT
                way, prio,
                ('highway_' || (CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END)) AS feature,
                horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE WHEN oneway IN ('yes', '1', '-1') THEN oneway ELSE NULL END AS oneway,
                CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no' END AS link,
                CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
            FROM planet_osm_line
              JOIN (VALUES
                ('highway_motorway', 380),
                ('highway_trunk', 370),
                ('highway_primary', 360),
                ('highway_secondary', 350),
                ('highway_tertiary', 340),
                ('highway_residential', 330),
                ('highway_unclassified', 330),
                ('highway_road', 330),
                ('highway_living_street', 320),
                ('highway_pedestrian', 310),
                ('highway_raceway', 300),
                ('highway_motorway_link', 240),
                ('highway_ramp_fast', 235),
                ('highway_trunk_link', 230),
                ('highway_primary_link', 220),
                ('highway_ramp_slow', 215),
                ('highway_secondary_link', 210),
                ('highway_tertiary_link', 200),
                ('highway_road_link', 180),
                ('highway_service', 150),
                ('highway_track', 110),
                ('highway_path', 100),
                ('highway_footway', 100),
                ('highway_bridleway', 100),
                ('highway_cycleway', 100),
                ('highway_steps', 100),
                ('highway_platform', 90),
                ('highway_proposed', 20),
                ('highway_construction', 10)
              ) AS ordertable (feature, prio)
                ON ('highway_' || planet_osm_line.highway) = ordertable.feature
            WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
          )
          UNION ALL
          (SELECT
              way, prio,
              COALESCE(('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' ELSE railway END)),
               ('aeroway_' || aeroway)) AS feature,
               horse, foot, bicycle, tracktype, "ump:route_class" AS ump_route_class, junction,
              CASE WHEN access IN ('destination') THEN 'destination'::text
                WHEN access IN ('no', 'private') THEN 'no'::text
              ELSE NULL END AS access,
              construction,
              CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
              NULL AS oneway,
              'no' AS link,
              CASE WHEN layer~E'^-?\\d+$' AND length(layer)<10 THEN layer::integer ELSE 0 END AS layernotnull
            FROM planet_osm_line
              JOIN (VALUES
                ('railway_rail', 430),
                ('railway_spur', 430),
                ('railway_siding', 430),
                ('railway_subway', 420),
                ('railway_narrow_gauge', 420),
                ('railway_light_rail', 420),
                ('railway_preserved', 420),
                ('railway_funicular', 420),
                ('railway_monorail', 420),
                ('railway_miniature', 420),
                ('railway_turntable', 420),
                ('railway_tram', 410),
                ('railway_disused', 400),
                ('railway_construction', 400),
                ('aeroway_runway', 60),
                ('aeroway_taxiway', 50),
                ('railway_platform', 90)
              ) AS ordertable (feature, prio)
                ON COALESCE(('railway_' || planet_osm_line.railway), ('aeroway_' || planet_osm_line.aeroway)) = ordertable.feature
            WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
            )) AS features
          ORDER BY layernotnull, prio, case when access in ('no', 'private') then 0 when access in ('destination') then 1 else 2 end
        ) AS bridges
    properties:
      group-by: "layernotnull"
    advanced: {}
  - id: "guideways"
    name: "guideways"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way FROM planet_osm_line WHERE highway = 'bus_guideway' AND (tunnel IS NULL OR tunnel != 'yes')) AS guideways
    advanced: {}
  - id: "admin-low-zoom"
    name: "admin-low-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, admin_level
               FROM planet_osm_roads
               WHERE "boundary" = 'administrative'
                 AND admin_level IN ('0', '1', '2', '3', '4')
               ORDER BY admin_level DESC
               ) AS admin_low_zoom
    advanced: {}
  - id: "admin-mid-zoom"
    name: "admin-mid-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, admin_level
               FROM planet_osm_roads
               WHERE "boundary" = 'administrative'
                 AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')
               ORDER BY admin_level DESC
               ) AS admin_mid_zoom
    advanced: {}
  - id: "admin-high-zoom"
    name: "admin-high-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, admin_level
               FROM planet_osm_roads
               WHERE "boundary" = 'administrative'
                 AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
               ORDER BY admin_level DESC
               ) AS admin_high_zoom
    advanced: {}
  - id: "power-minorline"
    name: "power-minorline"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way FROM planet_osm_line WHERE "power" = 'minor_line') AS power_minorline
    advanced: {}
  - id: "power-line"
    name: "power-line"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way FROM planet_osm_line WHERE "power" = 'line') AS power_line
    advanced: {}
  - id: "nature-reserve-boundaries"
    name: "nature-reserve-boundaries"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, way_area, name, boundary FROM planet_osm_polygon WHERE (boundary = 'national_park' OR leisure = 'nature_reserve') AND building IS NULL) AS national_park_boundaries
    advanced: {}
  - id: "theme-park"
    name: "theme-park"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, name, tourism FROM planet_osm_polygon WHERE tourism = 'theme_park') AS theme_park
    advanced: {}
  - id: "nepopulated"
    name: "nepopulated"
    class: ""
    geometry: "point"
    <<: *extents84
    Datasource:
      file: "data/ne_10m_populated_places/ne_10m_populated_places_fixed.shp"
      type: "shape"
      encoding: "windows-1252"
    advanced:
      encoding: "windows-1252"
  - id: "placenames-large"
    name: "placenames-large"
    class: "country state"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, place, name, ref
               FROM planet_osm_point
               WHERE place IN ('country', 'state')
              ) AS placenames_large
    advanced: {}
  - id: "placenames-capital"
    name: "placenames-capital"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, place, name, ref
               FROM planet_osm_point
               WHERE place IN ('city', 'town') AND capital = 'yes'
              ) AS placenames_capital
    advanced: {}
  - id: "placenames-medium"
    name: "placenames-medium"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, place, name
              FROM planet_osm_point
              WHERE place IN ('city', 'town')
                AND (capital IS NULL OR capital != 'yes')
              ) AS placenames_medium
    advanced: {}
  - id: "placenames-small"
    name: "placenames-small"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, place, name
              FROM planet_osm_point
              WHERE place IN ('suburb', 'village', 'hamlet', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm')
              ) AS placenames_small
    advanced: {}
  - id: "poi-jedzenie-point"
    name: "poi-jedzenie-point"
    class: "poi-jedzenie"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2a00' AND '0x2a13'
         ) AS poi_jedzenie_point
    advanced: {}
  - id: "poi-rozrywka-point"
    name: "poi-rozrywka-point"
    class: "poi-rozrywka"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2d00' AND '0x2d13'
         ) AS poi_rozrywka_point
    advanced: {}
  - id: "poi-zakupy-point"
    name: "poi-zakupy-point"
    class: "poi-zakupy"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2e00' AND '0x2e13'
         ) AS poi_zakupy_point
    advanced: {}
  - id: "poi-uslugi-point"
    name: "poi-uslugi-point"
    class: "poi-uslugi"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x2f00','0x2f01','0x2f03','0x2f05','0x2f06','0x2f07','0x2f09','0x2f0a','0x2f0b','0x2f0c','0x2f0d','0x2f0e','0x2f0f','0x2f10','0x2f11','0x2f12','0x2f13','0x2f14','0x2f15','0x2f16','0x2f19')
         ) AS poi_uslugi_point
    advanced: {}
  - id: "poi-transport-point"
    name: "poi-transport-point"
    class: "poi-transport"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ, "ump:endlevel" as ump_endlevel
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x2f02','0x2f04','0x2f08','0x2f17','0x2f18','0x5901','0x5902','0x5903')
         ) AS poi_transport_point
    advanced: {}
  - id: "poi-highways-point"
    name: "poi-highways-point"
    class: "poi-highways"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ, "ump:endlevel" as ump_endlevel
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2000' AND '0x2700'
         ) AS poi_highways_point
    advanced: {}
  - id: "poi-nocleg-point"
    name: "poi-nocleg-point"
    class: "poi-nocleg"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2b00' AND '0x2b07'
         ) AS poi_nocleg_point
    advanced: {}
  - id: "poi-atrakcje-point"
    name: "poi-atrakcje-point"
    class: "poi-atrakcje"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2c00' AND '0x2c13'
         ) AS poi_atrakcje_point
    advanced: {}
  - id: "poi-sluzby-point"
    name: "poi-sluzby-point"
    class: "poi-sluzby"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x3000' AND '0x3009'
         ) AS poi_sluzby_point
    advanced: {}
  - id: "poi-znaki-point"
    name: "poi-znaki-point"
    class: "poi-znaki"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, "ump:type" AS garmin_typ, highway
              FROM planet_osm_point
              WHERE "ump:type" IN ('0xf201','0x2855')
         ) AS poi_znaki_point
    advanced: {}
  - id: "poi-teren-point"
    name: "poi-teren-point"
    class: "poi-teren"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x6500' AND '0x6620'
         ) AS poi_teren_point
    advanced: {}
  - id: "poi-infra-point"
    name: "poi-infra-point"
    class: "poi-infra"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE ("ump:type" BETWEEN '0x4000' AND '0x64ff')
              OR "ump:type" IN ('0x1300')
         ) AS poi_infra_point
    advanced: {}
  - id: "poi-inne-point"
    name: "poi-inne-point"
    class: "poi-inne"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x1605')
              OR ("ump:type" BETWEEN '0x1708' AND '0x1712')
              OR ("ump:type" BETWEEN '0x1f00' AND '0x2800')
              OR ("ump:type" BETWEEN '0x6701' AND '0x670b')
         ) AS poi_inne_point
    advanced: {}
  - id: "poi-morze-point"
    name: "poi-morze-point"
    class: "poi-morze"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE ("ump:type" BETWEEN '0x1606' AND '0x1707')
              OR ("ump:type" BETWEEN '0x1806' AND '0x1d00')
         ) AS poi_morze_point
    advanced: {}
  - id: "roads-text-ref-low-zoom"
    name: "roads-text-ref-low-zoom"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, highway, height, width, refs FROM
          (SELECT
              way, highway,
              array_length(refs,1) AS height,
              (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
              array_to_string(refs, E'\n') AS refs
            FROM (
              SELECT
                  way,
                  highway,
                  string_to_array(ref, ';') AS refs
              FROM planet_osm_roads
                WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')
                AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 8) AS roads_text_ref_low_zoom
    advanced: {}
  - id: "roads-text-ref"
    name: "roads-text-ref"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, highway, height, width, refs FROM
          (SELECT
              way, highway,
              array_length(refs,1) AS height,
              (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
              array_to_string(refs, E'\n') AS refs
            FROM (
              SELECT
                  way,
                  COALESCE(highway, aeroway) AS highway,
                  string_to_array(ref, ';') AS refs
              FROM planet_osm_line
                WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') OR aeroway IN ('runway', 'taxiway'))
                AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 8) AS roads_text_ref
    advanced: {}
  - id: "roads-area-text-name"
    name: "roads-area-text-name"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way, way_area/(!pixel_width!*!pixel_height!) AS way_pixels, highway, name
               FROM planet_osm_polygon
               WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform') OR railway IN ('platform') AND name IS NOT NULL
              ) AS roads_area_text_name
    advanced: {}
  - id: "roads-text-name"
    name: "roads-text-name"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way,
                 CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END,
                 CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
                 name, tracktype
               FROM planet_osm_line
               WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'road', 'ramp_slow', 'ramp_fast', 'road_link', 'service', 'pedestrian', 'raceway', 'living_street', 'construction', 'proposed')
                 AND name IS NOT NULL
              ) AS roads_text_name
    advanced: {}
  - id: "paths-text-name"
    name: "paths-text-name"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way, highway, name
               FROM planet_osm_line
               WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps')
                 AND name IS NOT NULL
              ) AS paths_text_name
    advanced: {}
  - id: "poi-jedzenie-tekst"
    name: "poi-jedzenie-tekst"
    class: "poi-jedzenie-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2a00' AND '0x2a13'
         ) AS poi_jedzenie_tekst
    advanced: {}
  - id: "poi-rozrywka-tekst"
    name: "poi-rozrywka-tekst"
    class: "poi-rozrywka-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2d00' AND '0x2d13'
         ) AS poi_rozrywka_tekst
    advanced: {}
  - id: "poi-zakupy-tekst"
    name: "poi-zakupy-tekst"
    class: "poi-zakupy-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2e00' AND '0x2e13'
         ) AS poi_zakupy_tekst
    advanced: {}
  - id: "poi-uslugi-tekst"
    name: "poi-uslugi-tekst"
    class: "poi-uslugi-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x2f00','0x2f01','0x2f03','0x2f05','0x2f06','0x2f07','0x2f09','0x2f0a','0x2f0b','0x2f0c','0x2f0d','0x2f0e','0x2f0f','0x2f10','0x2f11','0x2f12','0x2f13','0x2f14','0x2f15','0x2f16','0x2f19')
         ) AS poi_uslugi_tekst
    advanced: {}
  - id: "poi-transport-tekst"
    name: "poi-transport-tekst"
    class: "poi-transport-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ, "ump:endlevel" as ump_endlevel
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x2f02','0x2f04','0x2f08','0x2f17','0x2f18','0x5901','0x5902','0x5903')
         ) AS poi_transport_tekst
    advanced: {}
  - id: "poi-highways-tekst"
    name: "poi-highways-tekst"
    class: "poi-highways-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ, "ump:endlevel" as ump_endlevel
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2000' AND '0x2700'
         ) AS poi_highways_tekst
    advanced: {}
  - id: "poi-nocleg-tekst"
    name: "poi-nocleg-tekst"
    class: "poi-nocleg-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2b00' AND '0x2b07'
         ) AS poi_nocleg_tekst
    advanced: {}
  - id: "poi-atrakcje-tekst"
    name: "poi-atrakcje-tekst"
    class: "poi-atrakcje-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x2c00' AND '0x2c13'
         ) AS poi_atrakcje_tekst
    advanced: {}
  - id: "poi-sluzby-tekst"
    name: "poi-sluzby-tekst"
    class: "poi-sluzby-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x3000' AND '0x3009'
         ) AS poi_sluzby_tekst
    advanced: {}
  - id: "poi-teren-tekst"
    name: "poi-teren-tekst"
    class: "poi-teren-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" BETWEEN '0x6500' AND '0x6620'
         ) AS poi_teren_tekst
    advanced: {}
  - id: "poi-infra-tekst"
    name: "poi-infra-tekst"
    class: "poi-infra-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE ("ump:type" BETWEEN '0x4000' AND '0x64ff')
              OR "ump:type" IN ('0x1300')
         ) AS poi_infra_tekst
    advanced: {}
  - id: "poi-inne-tekst"
    name: "poi-inne-tekst"
    class: "poi-inne-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE "ump:type" IN ('0x1605')
              OR ("ump:type" BETWEEN '0x1708' AND '0x1712')
              OR ("ump:type" BETWEEN '0x1f00' AND '0x2800')
              OR ("ump:type" BETWEEN '0x6701' AND '0x670b')
         ) AS poi_inne_tekst
    advanced: {}
  - id: "poi-morze-tekst"
    name: "poi-morze-tekst"
    class: "poi-morze-tekst"
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, "ump:typ" AS ump_typ, name, "ump:type" AS garmin_typ
              FROM planet_osm_point
              WHERE ("ump:type" BETWEEN '0x1606' AND '0x1707')
              OR ("ump:type" BETWEEN '0x1806' AND '0x1d00')
         ) AS poi_morze_tekst
    advanced: {}
  - id: "building-text"
    name: "building-text"
    class: ""
    geometry: "polygon"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT name, way, way_area/(!pixel_width!*!pixel_height!) AS way_pixels
        FROM planet_osm_polygon
        WHERE building IS NOT NULL AND building NOT IN ('no', 'station', 'supermarket')
        ORDER BY way_area DESC
        ) AS building_text
    advanced: {}
  - id: "interpolation"
    name: "interpolation"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way
        FROM planet_osm_line
        WHERE "addr:interpolation" IS NOT NULL) AS interpolation
    advanced: {}
  - id: "housenumbers"
    name: "housenumbers"
    class: ""
    geometry: "point"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way,"addr:housenumber", way_area, "ump:typ" as ump_typ, layer FROM planet_osm_polygon WHERE "addr:housenumber" IS NOT NULL AND building IS NOT NULL
               UNION
               SELECT way,"addr:housenumber", NULL AS way_area, "ump:typ" AS ump_typ, layer FROM planet_osm_point WHERE "addr:housenumber" IS NOT NULL
               ORDER BY way_area DESC
              ) AS housenumbers
    advanced: {}
  - id: "water-lines-text"
    name: "water-lines-text"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
              (SELECT way, waterway, lock, name, CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
              FROM planet_osm_line
              WHERE waterway IN ('weir', 'river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
               ORDER BY z_order
              ) AS water_lines_text
    advanced: {}
  - id: "ferry-routes-text"
    name: "ferry-routes-text"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT
          way, name
          FROM planet_osm_line
          WHERE route = 'ferry'
        ) AS ferry_routes_text
    advanced: {}
  - id: "admin-text"
    name: "admin-text"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, name, admin_level FROM planet_osm_polygon WHERE "boundary" = 'administrative' AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')) AS admin_text
    advanced: {}
  - id: "nature-reserve-text"
    name: "nature-reserve-text"
    class: ""
    geometry: "linestring"
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |2-
        (SELECT way, name, way_area/(!pixel_width!*!pixel_height!) AS way_pixels
          FROM planet_osm_polygon WHERE "boundary" = 'national_park' OR leisure = 'nature_reserve') AS nature_reserve_text
    advanced: {}
